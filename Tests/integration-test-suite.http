# Complete Integration Test Suite
# This file tests the complete workflow from user registration to inventory management
@baseUrl = http://localhost:5205
@authUrl = {{baseUrl}}/api/auth
@inventoryUrl = {{baseUrl}}/api/inventory

### Test Data
@adminEmail = admin@logitrack.com
@adminPassword = AdminPass123!
@managerEmail = manager@logitrack.com
@managerPassword = ManagerPass123!
@userEmail = user@logitrack.com
@userPassword = UserPass123!

# ==== PHASE 1: USER MANAGEMENT ====

### 1. Register Admin User
POST {{authUrl}}/register
Content-Type: application/json

{
    "email": "{{adminEmail}}",
    "password": "{{adminPassword}}"
}

### 2. Register Manager User
POST {{authUrl}}/register
Content-Type: application/json

{
    "email": "{{managerEmail}}",
    "password": "{{managerPassword}}"
}

### 3. Register Regular User
POST {{authUrl}}/register
Content-Type: application/json

{
    "email": "{{userEmail}}",
    "password": "{{userPassword}}"
}

### 4. Login as Admin
# @name adminLogin
POST {{authUrl}}/login
Content-Type: application/json

{
    "email": "{{adminEmail}}",
    "password": "{{adminPassword}}"
}

### 5. Assign Admin role to admin user
POST {{authUrl}}/assign-role
Content-Type: application/json

{
    "email": "{{adminEmail}}",
    "role": "Admin"
}

### 6. Assign Manager role to manager user
POST {{authUrl}}/assign-role
Content-Type: application/json

{
    "email": "{{managerEmail}}",
    "role": "Manager"
}

### 7. Login as Manager
# @name managerLogin
POST {{authUrl}}/login
Content-Type: application/json

{
    "email": "{{managerEmail}}",
    "password": "{{managerPassword}}"
}

### 8. Login as Regular User
# @name userLogin
POST {{authUrl}}/login
Content-Type: application/json

{
    "email": "{{userEmail}}",
    "password": "{{userPassword}}"
}

# ==== PHASE 2: INVENTORY MANAGEMENT ====

### Extract tokens
@adminToken = {{adminLogin.response.body.token}}
@managerToken = {{managerLogin.response.body.token}}
@userToken = {{userLogin.response.body.token}}

### 9. Manager creates initial inventory items
# @name createLaptop
POST {{inventoryUrl}}
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
    "name": "Dell XPS 13 Laptop",
    "quantity": 10,
    "location": "Warehouse A - Electronics Section"
}

### 10. Manager creates more inventory
# @name createMouse
POST {{inventoryUrl}}
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
    "name": "Wireless Mouse Logitech",
    "quantity": 25,
    "location": "Warehouse A - Accessories"
}

### 11. Manager creates office supplies
# @name createChair
POST {{inventoryUrl}}
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
    "name": "Ergonomic Office Chair",
    "quantity": 15,
    "location": "Warehouse B - Furniture"
}

### 12. Admin creates high-value item
# @name createServer
POST {{inventoryUrl}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Dell PowerEdge Server",
    "quantity": 2,
    "location": "Data Center - Rack 1"
}

### 13. Regular user views all inventory (should work)
GET {{inventoryUrl}}?page=1&pageSize=10
Authorization: Bearer {{userToken}}

### 14. Regular user views specific item (should work)
@laptopId = {{createLaptop.response.body.id}}
GET {{inventoryUrl}}/{{laptopId}}
Authorization: Bearer {{userToken}}

### 15. Regular user tries to create item (should fail)
POST {{inventoryUrl}}
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
    "name": "Unauthorized Item",
    "quantity": 1,
    "location": "Should Not Work"
}

### 16. Manager updates inventory item
PUT {{inventoryUrl}}/{{laptopId}}
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
    "name": "Dell XPS 13 Laptop (Updated)",
    "quantity": 8,
    "location": "Warehouse A - Electronics Section (Updated)"
}

### 17. Regular user tries to update item (should fail)
PUT {{inventoryUrl}}/{{laptopId}}
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
    "quantity": 999
}

### 18. Manager performs partial update
@mouseId = {{createMouse.response.body.id}}
PUT {{inventoryUrl}}/{{mouseId}}
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
    "quantity": 30
}

### 19. Admin deletes item
@chairId = {{createChair.response.body.id}}
DELETE {{inventoryUrl}}/{{chairId}}
Authorization: Bearer {{adminToken}}

### 20. Regular user tries to delete item (should fail)
DELETE {{inventoryUrl}}/{{mouseId}}
Authorization: Bearer {{userToken}}

### 21. Verify deletion - should return 404
GET {{inventoryUrl}}/{{chairId}}
Authorization: Bearer {{userToken}}

### 22. Final inventory check - pagination test
GET {{inventoryUrl}}?page=1&pageSize=2
Authorization: Bearer {{userToken}}

### 23. Test with larger page size
GET {{inventoryUrl}}?page=1&pageSize=50
Authorization: Bearer {{userToken}}

# ==== PHASE 3: ERROR HANDLING TESTS ====

### 24. Test unauthenticated access
GET {{inventoryUrl}}

### 25. Test with invalid token
GET {{inventoryUrl}}
Authorization: Bearer invalid-token-here

### 26. Test creating item with validation errors
POST {{inventoryUrl}}
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
    "name": "",
    "quantity": -5,
    "location": "Invalid Item Test"
}

### 27. Test updating non-existent item
PUT {{inventoryUrl}}/99999
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
    "name": "Non-existent Item Update"
}

### 28. Test deleting non-existent item
DELETE {{inventoryUrl}}/99999
Authorization: Bearer {{managerToken}}

### 29. Final status check - view remaining inventory
GET {{inventoryUrl}}
Authorization: Bearer {{adminToken}}